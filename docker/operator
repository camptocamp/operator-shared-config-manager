#!/usr/bin/env python

import logging

from kubernetes import client, config, watch

LOG = logging.getLogger(__name__)


logging.basicConfig(level=logging.INFO)

LOG.info("Hello")

try:
    config.load_kube_config()
except:
    config.load_incluster_config()

api = client.CoreV1Api()
custom_api = client.CustomObjectsApi()
watch = watch.Watch()

for event in watch.stream(
    custom_api.list_cluster_custom_object, group="camptocamp.com", version="v1", plural="sharedconfigitems"
):
    print(event["object"].keys())
    metadata = event["object"]["metadata"]
    spec = event["object"]["spec"]
    # selector = event["object"]["selector"]

    # if selector ...

    logging.info(
        f"Event {event['type']}, Service Name: {metadata['name']}, "
        f"Service Type: {spec['type']}, Namespace: {metadata.get('namespace')}"
    )
    custom_objects = custom_api.list_cluster_custom_object(
        group="camptocamp.com", version="v1", plural="sharedconfigitems"
    )
    logging.info(f"{custom_objects}")

    config_map = client.V1ConfigMap(
        metadata=client.V1ObjectMeta(
            name="sharedconfig-test-config",
            labels={
                "test": "test",
            },
        ),
        data={"core": "me"},
    )
    try:
        api.replace_namespaced_config_map(
            name="sharedconfig-test-config", namespace="default", body=config_map
        )
    except client.exceptions.ApiException:
        api.create_namespaced_config_map(namespace="default", body=config_map)

    # Ignore les Services de type ExternalName ou ceux qui n'ont pas de
    # "selector" comme   1'API server ou ceux qui sont en cours de suppression
    # if selector is None or spec.type == "ExternalName" or event["type"] == "DELETED":
    #    logging.info(f"Skip Service {metadata .name}")
